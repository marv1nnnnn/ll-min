A:requests.adapters#HTTPAdapter§I(pool_connections~int=10,pool_maxsize~int=10,max_retries~int=0,pool_block~bool=False)§M:send(request~PreparedRequest,stream~bool=False,timeout~float,(connect~float,read~float),verify~bool|str=True,cert~tuple|str=None,proxies~dict=None)>Response§T:max_retries:Retry,config:dict,_pool_connections~int,_pool_maxsize~int,_pool_block~bool;requests.adapters#BaseAdapter§M:send(request~PreparedRequest,stream~bool=False,timeout~float,(connect~float,read~float),verify~bool|str=True,cert~tuple|str=None,proxies~dict=None)>Response!X§T:config:dict;requests.adapters#Ssl3HttpAdapter§I()§M:init_poolmanager(connections~int,maxsize~int,block~bool=False)>None;requests.auth#AuthBase§M:__call__(r~Request)>Request;requests.auth#HTTPBasicAuth§I(username~str,password~str)§M:__call__(r~Request)>Request;requests.auth#HTTPProxyAuth§I(username~str,password~str)§M:__call__(r~Request)>Request;requests.auth#HTTPDigestAuth§I(username~str,password~str)§M:__call__(r~Request)>Request,handle_401(r~Response,**kwargs)>Response,handle_redirect(r~Response,**kwargs)>Response;requests.cookies#RequestsCookieJar§I(policy=None)§M:get(name~str,default=None,domain=None,path=None)>str,set(name~str,value,**kwargs)>cookielib.Cookie,iterkeys()>iterator,keys()>list,itervalues()>iterator,values()>list,iteritems()>iterator,items()>list,list_domains()>list,list_paths()>list,multiple_domains()>bool,get_dict(domain=None,path=None)>dict,copy()>RequestsCookieJar,__contains__(name~str)>bool,__getitem__(name~str)>str,__setitem__(name~str,value),__delitem__(name~str),set_cookie(cookie~cookielib.Cookie,*args,**kwargs)>None,update(other)>None,_find(name~str,domain=None,path=None)>str,_find_no_duplicates(name~str,domain=None,path=None)>str;requests.cookies#CookieConflictError;requests.exceptions#RequestException§I(*args,**kwargs);requests.exceptions#InvalidJSONError;requests.exceptions#JSONDecodeError§I(*args,**kwargs);requests.exceptions#HTTPError;requests.exceptions#ConnectionError;requests.exceptions#ProxyError;requests.exceptions#SSLError;requests.exceptions#Timeout;requests.exceptions#ConnectTimeout;requests.exceptions#ReadTimeout;requests.exceptions#URLRequired;requests.exceptions#TooManyRedirects;requests.exceptions#MissingSchema;requests.exceptions#InvalidSchema;requests.exceptions#InvalidURL;requests.exceptions#InvalidHeader;requests.exceptions#InvalidProxyURL;requests.exceptions#ChunkedEncodingError;requests.exceptions#ContentDecodingError;requests.exceptions#StreamConsumedError;requests.exceptions#RetryError;requests.exceptions#UnrewindableBodyError;requests.exceptions#RequestsWarning;requests.exceptions#FileModeWarning;requests.exceptions#RequestsDependencyWarning;requests.models#RequestEncodingMixin§M:_encode_params(data)>str,prepare_url(url~str,params)>None,_get_idna_encoded_host(host~str)>str,_encode_files(files,data)>tuple;requests.models#RequestHooksMixin§M:register_hook(event~str,hook)>None,deregister_hook(event~str,hook)>bool;requests.models#Request§I(method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)§M:prepare()>PreparedRequest;requests.models#PreparedRequest§I()§M:prepare(method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)>None,prepare_method(method)>None,prepare_url(url~str,params)>None,prepare_headers(headers)>None,prepare_body(data,files,json=None)>None,prepare_content_length(body)>None,prepare_auth(auth,url="")>None,prepare_cookies(cookies)>None,prepare_hooks(hooks)>None,copy()>PreparedRequest,__repr__();requests.models#Response§I()§M:close()>None,iter_content(chunk_size=1,decode_unicode=False)>iterator,iter_lines(chunk_size=512,decode_unicode=False,delimiter=None)>iterator,raise_for_status()>None,__enter__(),__exit__(*args)>None,__getstate__(),__setstate__(state)>None,__repr__(),__bool__(),__nonzero__(),__iter__(),json(**kwargs)>object;requests.sessions#SessionRedirectMixin§M:get_redirect_target(resp~Response)>str,should_strip_auth(old_url~str,new_url~str)>bool,resolve_redirects(resp~Response,req~Request,stream=False,timeout=None,verify=True,cert=None,proxies=None,yield_requests=False,**adapter_kwargs)>iterator,rebuild_auth(prepared_request~PreparedRequest,response~Response)>None,rebuild_proxies(prepared_request~PreparedRequest,proxies~dict)>dict,rebuild_method(prepared_request~PreparedRequest,response~Response)>None;requests.sessions#Session§I()§M:prepare_request(request~Request)>PreparedRequest,request(method~str,url~str,params=None,data=None,headers=None,cookies=None,files=None,auth=None,timeout=None,allow_redirects=True,proxies=None,hooks=None,stream=None,verify=None,cert=None,json=None)>Response,get(url~str,**kwargs)>Response,options(url~str,**kwargs)>Response,head(url~str,**kwargs)>Response,post(url~str,data=None,json=None,**kwargs)>Response,put(url~str,data=None,**kwargs)>Response,patch(url~str,data=None,**kwargs)>Response,delete(url~str,**kwargs)>Response,send(request~PreparedRequest,**kwargs)>Response,merge_environment_settings(url~str,proxies~dict,stream~bool,verify~bool|str,cert~tuple|str)>dict,get_adapter(url~str)>BaseAdapter,close()>None,mount(prefix~str,adapter~BaseAdapter)>None,__getstate__(),__setstate__(state)>None;requests.sessions#session()>Session;requests.utils#RequestEncodingMixin§M:_encode_params(data)>str,prepare_url(url~str,params)>None,_get_idna_encoded_host(host~str)>str,_encode_files(files,data)>tuple;requests.utils#RequestHooksMixin§M:register_hook(event~str,hook)>None,deregister_hook(event~str,hook)>bool;requests.utils#atomic_open(filename~str)>contextlib._GeneratorContextManager;requests.utils#dict_to_sequence(d)>tuple;requests.utils#super_len(o)>int;requests.utils#get_netrc_auth(url~str,raise_errors~bool=False)>(str,str);requests.utils#guess_filename(obj)>str;requests.utils#extract_zipped_paths(path~str)>str;requests.utils#from_key_val_list(value)>OrderedDict;requests.utils#to_key_val_list(value)>list;requests.utils#parse_list_header(value~str)>list;requests.utils#parse_dict_header(value~str)>dict;requests.utils#unquote_header_value(value~str,is_filename~bool=False)>str;requests.utils#dict_from_cookiejar(cj)>dict;requests.utils#add_dict_to_cookiejar(cj,cookie_dict)>CookieJar;requests.utils#get_encodings_from_content(content)>list;requests.utils#_parse_content_type_header(header~str)>(str,dict);requests.utils#get_encoding_from_headers(headers)>str;requests.utils#stream_decode_response_unicode(iterator,r)>iterator;requests.utils#iter_slices(string~str,slice_length)>iterator;requests.utils#get_unicode_from_response(r)>str;requests.utils#unquote_unreserved(uri~str)>str;requests.utils#requote_uri(uri~str)>str;requests.utils#address_in_network(ip~str,net~str)>bool;requests.utils#dotted_netmask(mask~int)>str;requests.utils#is_ipv4_address(string_ip~str)>bool;requests.utils#is_valid_cidr(string_network~str)>bool;requests.utils#set_environ(env_name~str,value)>contextlib._GeneratorContextManager;requests.utils#should_bypass_proxies(url~str,no_proxy)>bool;requests.utils#get_environ_proxies(url~str,no_proxy=None)>dict;requests.utils#select_proxy(url~str,proxies~dict)>str;requests.utils#resolve_proxies(request,proxies~dict,trust_env~bool=True)>dict;requests.utils#default_user_agent(name="python-requests")>str;requests.utils#default_headers()>CaseInsensitiveDict;requests.utils#parse_header_links(value~str)>list;requests.utils#guess_json_utf(data)>str;requests.utils#prepend_scheme_if_needed(url~str,new_scheme~str)>str;requests.utils#get_auth_from_url(url~str)>(str,str);requests.utils#check_header_validity(header)>None;requests.utils#_validate_header_part(header,header_part,header_validator_index)>None;requests.utils#urldefragauth(url~str)>str;requests.utils#rewind_body(prepared_request~PreparedRequest)>None