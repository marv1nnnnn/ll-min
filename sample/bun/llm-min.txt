#META#L:bun_sh_llms-full_txt#V:1.0#D:2025-05-12T12:56:02Z#
#SCHEMA#A:id;B:typ;C:name;D:purp;E:in;F:out;G:use;H:rel;I:src#IN:a:p;b:t;c:d;d:def;e:ex#OUT:f:f;g:t;h:d#REL:i:id;j:typ#
```
["feat1","Feat","Bun Runtime","Fast JavaScript runtime with Node.js & Web API compatibility, fast file I/O, native DB clients, Shell, Child Processes, Binary Data handling, specific runtime configs (--define, env vars, timezone, nanoseconds).","[]","[]","","[[\"feat12\",\"Feat\"],[\"feat13\",\"Feat\"],[\"feat16\",\"Feat\"],[\"feat17\",\"Feat\"],[\"feat18\",\"Feat\"],[\"feat19\",\"Feat\"],[\"feat31\",\"Feat\"],[\"feat32\",\"Feat\"],[\"ft_binary_data\",\"Feat\"],[\"ft_define_constant\",\"Feat\"],[\"co_env_files\",\"CfgObj\"],[\"ht_process_nanoseconds\",\"HowTo\"],[\"ht_process_listen_signals\",\"HowTo\"],[\"ht_read_env\",\"HowTo\"],[\"ht_set_env\",\"HowTo\"],[\"ht_write_stdout_bun\",\"HowTo\"],[\"ht_process_read_stdin_bun\",\"HowTo\"],[\"cfgobj1\",\"CfgObj\"]]","chunk_1"]
["feat2","Feat","Bun CLI","All-in-one command-line tool for JS/TS apps (test runner, script runner, package manager, bundler, compiler, debugger, etc.).","[]","[]","","[[\"howto10\",\"HowTo\"],[\"howto11\",\"HowTo\"],[\"ft_webkit_inspector\",\"Feat\"],[\"ht_debug_vscode\",\"HowTo\"],[\"ht_debug_web\",\"HowTo\"],[\"ft_define_constant\",\"Feat\"],[\"ht_define_constant\",\"HowTo\"],[\"ht_process_parse_argv\",\"HowTo\"],[\"ht_ts_install_types\",\"HowTo\"],[\"ht_cicd_github_actions\",\"HowTo\"]]","chunk_1"]
["howto1","HowTo","run file","Execute JavaScript, TypeScript, JSX, or TSX files directly.","[[\"file_path\",\"String\",\"Path to the file\",\"\",\"index.tsx\"]]","[]","bun run {file_path}","[[\"feat2\",\"Feat\"],[\"ht_cicd_github_actions\",\"HowTo\"]]","chunk_1"]
["howto2","HowTo","run script","Execute named scripts defined in package.json.","[[\"script_name\",\"String\",\"Name of the script in package.json\",\"\",\"start\"]]","[]","bun run {script_name}","[[\"feat2\",\"Feat\"],[\"ht_cicd_github_actions\",\"HowTo\"]]","chunk_1"]
["howto3","HowTo","install packages","Install all dependencies (dependencies, devDependencies, optionalDependencies, peerDependencies) from package.json.","[]","[]","bun install","[[\"feat2\",\"Feat\"],[\"feat31\",\"Feat\"],[\"feat32\",\"Feat\"],[\"ft_workspaces\",\"Feat\"],[\"ft_global_cache\",\"Feat\"],[\"ft_trusted_deps\",\"Feat\"],[\"ht_cicd_github_actions\",\"HowTo\"]]","chunk_1"]
["howto4","HowTo","add package","Add a specific package to package.json dependencies.","[[\"package_name\",\"String\",\"Name of the package to add\",\"\",\"zod\"],[\"version_specifier\",\"String\",\"Specific version, range, tag, git repo, or tarball URL\",\"latest\",\"zod@3.0.0\"]]","[]","bun add {package_name}@{version_specifier}","[[\"feat2\",\"Feat\"],[\"feat31\",\"Feat\"],[\"ft_workspaces\",\"Feat\"],[\"ft_global_cache\",\"Feat\"]]","chunk_0"]
["howto5","HowTo","remove package","Remove a package from package.json dependencies.","[[\"package_name\",\"String\",\"Name of the package to remove\",\"\",\"ts-node\"]]","[]","bun remove {package_name}","[[\"feat2\",\"Feat\"]]","chunk_0"]
["howto6","HowTo","update packages","Update project dependencies to the latest versions matching package.json ranges or the absolute latest (--latest).","[[\"package_name\",\"String\",\"Optional: Name of a specific package to update\",\"null\",\"zod\"]]","[]","bun update {package_name,null}","[[\"feat2\",\"Feat\"],[\"howto5\",\"HowTo\"],[\"howto4\",\"HowTo\"]]","chunk_0"]
["howto7","HowTo","execute package (bunx)","Auto-install and run a package executable from npm (like npx/yarn dlx).","[[\"package_name\",\"String\",\"Name of the package with an executable\",\"\",\"cowsay\"],[\"args\",\"String(JSON Array)\",\"Arguments to pass to the executable\",\"[]\",\"['Hello, world!']\"]]","[]","bunx {package_name} {args,[]}}","[[\"feat2\",\"Feat\"],[\"howto4\",\"HowTo\"]]","chunk_0"]
["howto8","HowTo","init project","Scaffold an empty Bun project with sensible defaults.","[]","[]","bun init","[[\"feat2\",\"Feat\"]]","chunk_0"]
["howto9","HowTo","run tests (CLI)","Run project tests matching standard test file patterns.","[[\"filter\",\"String(JSON Array)\",\"Optional: Path filters or test name pattern\",\"[]\",\"['./utils']\"],[\"--test-name-pattern\",\"String\",\"Optional: Regex pattern to filter tests by name\",\"null\",\"addition\"]]","[]","bun test {filter,[]} --test-name-pattern {--test-name-pattern,null}","[[\"feat2\",\"Feat\"],[\"ht_cicd_github_actions\",\"HowTo\"]]","chunk_1"]
["howto10","HowTo","build project (CLI)","Bundle project code (JS, TS, JSX, TSX) for production, with options like minification and static defines.","[[\"entrypoint\",\"String(JSON Array)\",\"Entry file(s) or glob patterns\",\"\",\"['./index.tsx']\"],[\"--outdir\",\"String\",\"Output directory\",\"null\",\"dist\"],[\"--minify\",\"Boolean\",\"Enable minification\",\"F\",\"T\"],[\"defines\",\"String(JSON Array)\",\"Array of 'key=value' strings for static defines\",\"[]\",\"['process.env.NODE_ENV=\\'production\\'', 'window=undefined']\"]]","[]","bun build {entrypoint}{--outdir,null: --outdir}{--minify,F: --minify}{defines,[]: --define }","[[\"feat2\",\"Feat\"],[\"ft_define_constant\",\"Feat\"],[\"ht_define_constant\",\"HowTo\"],[\"ht_cicd_github_actions\",\"HowTo\"]]","chunk_1"]
["howto11","HowTo","compile executable (CLI)","Bundle code into a single standalone executable file.","[[\"entrypoint\",\"String\",\"Entry file\",\"\",\"./cli.ts\"],[\"--outfile\",\"String\",\"Output file name\",\"null\",\"mycli\"],[\"--target\",\"String\",\"Target platform\",\"null\",\"bun-linux-x64\"],[\"--minify\",\"Boolean\",\"Enable minification\",\"F\",\"T\"]]","[]","bun build {entrypoint} --compile --outfile {--outfile,null} --target {--target,null} --minify {--minify,F}","[[\"feat2\",\"Feat\"],[\"howto10\",\"HowTo\"],[\"ht_codesign_macos\",\"HowTo\"]]","chunk_1"]
["feat12","Feat","Node.js compatibility","Run most existing Node.js code and npm packages, including modules like `stream`, `fs/promises`, `fs`, `v8`, `util`, `process`, and `Buffer`.","[]","[]","","[[\"feat1\",\"Feat\"],[\"ht_stream_node_blob\",\"HowTo\"],[\"ht_stream_node_string\",\"HowTo\"],[\"ht_stream_node_arraybuffer\",\"HowTo\"],[\"ht_stream_node_uint8array\",\"HowTo\"],[\"ht_stream_node_json\",\"HowTo\"],[\"ht_fs_rmdir_promise\",\"HowTo\"],[\"ht_fs_rmdir_try_catch\",\"HowTo\"],[\"ht_heap_snapshot\",\"HowTo\"],[\"ht_ts_install_types\",\"HowTo\"],[\"ht_read_env\",\"HowTo\"],[\"ht_set_env\",\"HowTo\"],[\"ht_process_listen_sigint\",\"HowTo\"],[\"ht_process_listen_signals\",\"HowTo\"],[\"ht_process_parse_argv\",\"HowTo\"],[\"ht_process_read_stdin_console\",\"HowTo\"],[\"ht_spawn_ipc\",\"HowTo\"],[\"ht_fs_append_promise\",\"HowTo\"],[\"ht_fs_append_sync\",\"HowTo\"],[\"ht_write_stdout_console\",\"HowTo\"],[\"ht_http_stream_node_stream\",\"HowTo\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["feat13","Feat","Web API compatibility","Implements standard Web APIs like fetch, WebSocket, Streams, URL, Response, Request, Blob, FormData, Headers, TextDecoder, etc.","[]","[]","","[[\"feat1\",\"Feat\"],[\"ht_stream_node_blob\",\"HowTo\"],[\"ht_stream_node_string\",\"HowTo\"],[\"ht_stream_node_arraybuffer\",\"HowTo\"],[\"ht_stream_node_uint8array\",\"HowTo\"],[\"ht_stream_node_json\",\"HowTo\"],[\"ht_stream_web_blob_bun\",\"HowTo\"],[\"ht_stream_web_arraybuffer_bun\",\"HowTo\"],[\"ht_stream_web_string_bun\",\"HowTo\"],[\"ht_stream_web_uint8array_bun\",\"HowTo\"],[\"ht_stream_web_json_bun\",\"HowTo\"],[\"ft_webkit_inspector\",\"Feat\"],[\"ht_write_stream_to_file_bun\",\"HowTo\"],[\"ht_write_response_to_file_bun\",\"HowTo\"],[\"ht_http_fetch_unix\",\"HowTo\"],[\"ht_http_fetch_proxy\",\"HowTo\"],[\"ht_http_stream_file\",\"HowTo\"],[\"ht_http_stream_async_iterator\",\"HowTo\"],[\"ht_http_stream_node_stream\",\"HowTo\"],[\"ht_http_upload_formdata\",\"HowTo\"],[\"ft_binary_data\",\"Feat\"],[\"ht_binary_blob_to_dataview\",\"HowTo\"],[\"ht_binary_blob_to_stream\",\"HowTo\"],[\"ht_binary_blob_to_string\",\"HowTo\"],[\"ht_binary_blob_to_uint8array\",\"HowTo\"],[\"ht_binary_blob_to_arraybuffer\",\"HowTo\"],[\"ht_binary_buffer_to_blob\",\"HowTo\"],[\"ht_binary_buffer_to_readablestream\",\"HowTo\"],[\"ht_binary_uint8array_to_blob\",\"HowTo\"],[\"ht_binary_uint8array_to_dataview\",\"HowTo\"],[\"ht_binary_uint8array_to_readablestream\",\"HowTo\"],[\"ht_binary_uint8array_to_string\",\"HowTo\"],[\"ht_binary_uint8array_to_arraybuffer\",\"HowTo\"],[\"ht_binary_arraybuffer_to_blob\",\"HowTo\"],[\"ht_binary_arraybuffer_to_string\",\"HowTo\"],[\"ht_binary_arraybuffer_to_uint8array\",\"HowTo\"],[\"ht_binary_arraybuffer_to_array\",\"HowTo\"]]","chunk_1"]
["feat14","Feat","TypeScript support","Natively execute .ts and .tsx files without extra configuration, supports tsconfig.json paths, and provides built-in types via @types/bun.","[]","[]","","[[\"feat1\",\"Feat\"],[\"feat16\",\"Feat\"],[\"co_tsconfig_bun_options\",\"CfgObj\"],[\"ht_ts_install_types\",\"HowTo\"],[\"ht_ts_remap_paths\",\"HowTo\"]]","chunk_1"]
["feat15","Feat","JSX support","Natively execute .jsx and .tsx files.","[]","[]","","[[\"feat1\",\"Feat\"],[\"feat14\",\"Feat\"]]","chunk_0"]
["feat16","Feat","File I/O (Bun API)","Provides fast, native APIs for reading, writing, appending, copying, deleting files and directories (Bun.file, Bun.write, FileSink, Bun.stdin, Bun.stdout).","[]","[]","","[[\"feat1\",\"Feat\"],[\"ht_file_delete_bun\",\"HowTo\"],[\"ft_filesink\",\"Feat\"],[\"ht_file_write_incremental_filesink\",\"HowTo\"],[\"ht_file_copy_bun\",\"HowTo\"],[\"ht_write_blob_bun\",\"HowTo\"],[\"ht_write_file_stdout_bun\",\"HowTo\"],[\"ht_write_stream_to_file_bun\",\"HowTo\"],[\"ht_write_response_to_file_bun\",\"HowTo\"],[\"ht_write_string_to_file_bun\",\"HowTo\"],[\"ht_write_stdout_bun\",\"HowTo\"],[\"ht_process_read_stdin_bun\",\"HowTo\"],[\"ht_http_stream_file\",\"HowTo\"],[\"ht_http_upload_formdata\",\"HowTo\"]]","chunk_1"]
["feat17","Feat","SQLite (Bun API)","Native, high-performance driver for SQLite databases.","[]","[]","","[[\"feat1\",\"Feat\"]]","chunk_0"]
["feat18","Feat","Postgres (Bun API)","Native, Promise-based client for PostgreSQL databases.","[]","[]","","[[\"feat1\",\"Feat\"]]","chunk_0"]
["feat19","Feat","Redis (Bun API)","Native, Promise-based client for Redis databases.","[]","[]","","[[\"feat1\",\"Feat\"]]","chunk_0"]
["howto20","HowTo","start http server (Bun.serve)","Start a high-performance HTTP server, handle requests with Web Request/Response, support basic routing, various responses (text, file, JSON, redirect), and receive POST data (form, JSON).","[[\"port\",\"Number\",\"Port to listen on\",\"3000\",null],[\"fetch_handler\",\"Object\",\"The fetch handler function accepting Request and returning Response\",\"\",null]]","[]","const server = Bun.serve({{{{ port: {port,3000}, async fetch(req) {{{{ const path = new URL(req.url).pathname;\n  if (path === \"/\") return new Response(\"Welcome to Bun!\");\n  if (path === \"/api\") return Response.json({{{{ some: \"buns\" }}}});\n  if (req.method === \"POST\" && path === \"/api/post\") {{{{ const data = await req.json(); return Response.json({{{{ success: true, data }}}} }); }}}}\n  return new Response(\"Not Found\", {{{{ status: 404 }}}}); }}}} }}});\nconsole.log(`Listening on ${{{{server.url}}}}`);","[[\"feat1\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ht_http_serve_tls\",\"HowTo\"],[\"ht_http_hot_reload\",\"HowTo\"],[\"ht_http_cluster\",\"HowTo\"],[\"ht_http_stream_file\",\"HowTo\"],[\"ht_http_stream_async_iterator\",\"HowTo\"],[\"ht_http_stream_node_stream\",\"HowTo\"],[\"ht_http_upload_formdata\",\"HowTo\"]]","chunk_1"]
["howto21","HowTo","send http request (fetch)","Send HTTP requests using the Web-standard fetch API, supporting GET and POST with headers and body.","[[\"url\",\"String\",\"URL to request\",\"\",\"https://bun.sh\"],[\"options\",\"Object\",\"Fetch options (method, headers, body, etc.)\",null,null]]","[[\"response\",\"Object\",\"The fetch Response object\",null,null]]","const responseGet = await fetch(\"{url}\");\nconst html = await responseGet.text();\n\nconst responsePost = await fetch(\"{url}/api\", {{{{ method: \"POST\", body: JSON.stringify({{{{ message: \"Hello\" }}}}, headers: {{{{ \"Content-Type\": \"application/json\" }}}} }}});\nconst body = await responsePost.json();","[[\"feat13\",\"Feat\"],[\"ht_http_fetch_unix\",\"HowTo\"],[\"ht_http_fetch_proxy\",\"HowTo\"]]","chunk_1"]
["feat22","Feat","WebSockets (Bun.serve)","Support for server-side WebSockets with Bun.serve, including pub-sub.","[]","[]","","[[\"howto20\",\"HowTo\"],[\"feat13\",\"Feat\"]]","chunk_0"]
["feat23","Feat","File Loaders","Built-in support for processing various file types (JS, TS, JSON, TOML, etc.) during runtime and bundling, including native JSON/TOML imports.","[]","[]","","[[\"feat1\",\"Feat\"],[\"howto10\",\"HowTo\"],[\"ft_native_imports\",\"Feat\"],[\"ht_import_html_text\",\"HowTo\"],[\"ht_import_json\",\"HowTo\"],[\"ht_import_toml\",\"HowTo\"]]","chunk_1"]
["feat24","Feat","Plugins","Extend Bun's runtime and bundler with custom loaders and lifecycle hooks.","[]","[]","","[[\"feat1\",\"Feat\"],[\"feat23\",\"Feat\"]]","chunk_0"]
["feat25","Feat","Watch Mode","Automatically restarts the process when imported files change.","[]","[]","","[[\"feat2\",\"Feat\"]]","chunk_0"]
["feat26","Feat","Hot Reload","Updates code without restarting the process (server-side HMR), particularly for Bun.serve fetch handlers, or provides client-side HMR API.","[]","[]","","[[\"feat2\",\"Feat\"],[\"ht_http_hot_reload\",\"HowTo\"]]","chunk_1"]
["cfgobj1","CfgObj","bunfig.toml","Optional TOML configuration file to customize Bun's behavior (runtime, test runner, package manager).","[]","[]","","[[\"feat1\",\"Feat\"],[\"feat2\",\"Feat\"],[\"ft_trusted_deps\",\"Feat\"]]","chunk_0"]
["feat28","Feat","Workspaces","Manage multiple packages within a single monorepo using package.json workspaces.","[]","[]","","[[\"howto3\",\"HowTo\"],[\"howto4\",\"HowTo\"]]","chunk_0"]
["feat29","Feat","Global Cache","Stores and reuses downloaded packages globally for space and time efficiency.","[]","[]","","[[\"howto3\",\"HowTo\"],[\"howto4\",\"HowTo\"]]","chunk_0"]
["feat30","Feat","Trusted Dependencies","Allows specific packages to execute lifecycle scripts during installation for security. Configured in bunfig.toml.","[]","[]","","[[\"howto3\",\"HowTo\"],[\"cfgobj1\",\"CfgObj\"]]","chunk_0"]
["feat31","Feat","Shell (Bun API)","Cross-platform bash-like shell for running commands with JavaScript interop using the $ function.","[]","[]","","[[\"feat1\",\"Feat\"],[\"ht_shell_run_command\",\"HowTo\"]]","chunk_1"]
["feat32","Feat","Child Processes (Bun API)","Spawn and manage subprocesses (asynchronously or synchronously) with control over stdio, exit handling, and IPC for Bun processes.","[]","[]","","[[\"feat1\",\"Feat\"],[\"ht_spawn_process\",\"HowTo\"],[\"ht_spawn_read_stdout\",\"HowTo\"],[\"ht_spawn_read_stderr\",\"HowTo\"],[\"ht_spawn_ipc\",\"HowTo\"],[\"ht_http_cluster\",\"HowTo\"]]","chunk_1"]
["feat33","Feat","HTML/Static Sites","Native support for serving and building static sites and SPAs from HTML entrypoints.","[]","[]","","[[\"howto10\",\"HowTo\"],[\"howto20\",\"HowTo\"]]","chunk_0"]
["feat34","Feat","CSS Processing","Built-in bundling, minification, and transpiling of modern CSS.","[]","[]","","[[\"howto10\",\"HowTo\"],[\"feat33\",\"Feat\"]]","chunk_0"]
["feat35","Feat","CSS Modules","Supports scoped CSS classes to avoid naming conflicts.","[]","[]","","[[\"feat34\",\"Feat\"]]","chunk_0"]
["feat36","Feat","SQL (Postgres Client)","Native bindings for working with PostgreSQL databases.","[]","[]","","[[\"feat1\",\"Feat\"],[\"feat18\",\"Feat\"]]","chunk_0"]
["feat37","Feat","S3 (Object Storage)","Native bindings for interacting with S3-compatible object storage services.","[]","[]","","[[\"feat1\",\"Feat\"]]","chunk_0"]
["ht_stream_node_blob","HowTo","Convert Node.js Readable to Blob","Convert a Node.js Readable stream to a Blob using a Response object.","[[\"stream\",\"Object\",\"Node.js Readable stream\",\"\",null]]","[[\"blob\",\"Object\",\"The resulting Blob\",null,null]]","import {{{{ Readable }}}} from \"stream\";\nconst stream = Readable.from([\"Hello, \", \"world!\"]);\nconst blob = await new Response(stream).blob();","[[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["ht_stream_node_string","HowTo","Convert Node.js Readable to string","Convert a Node.js Readable stream to a string using a Response object.","[[\"stream\",\"Object\",\"Node.js Readable stream\",\"\",null]]","[[\"string\",\"String\",\"The resulting string\",null,null]]","import {{{{ Readable }}}} from \"stream\";\nconst stream = Readable.from([Buffer.from(\"Hello, world!\")]);\nconst text = await new Response(stream).text();","[[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["ht_stream_node_arraybuffer","HowTo","Convert Node.js Readable to ArrayBuffer","Convert a Node.js Readable stream to an ArrayBuffer using a Response object.","[[\"stream\",\"Object\",\"Node.js Readable stream\",\"\",null]]","[[\"arraybuffer\",\"Object\",\"The resulting ArrayBuffer\",null,null]]","import {{{{ Readable }}}} from \"stream\";\nconst stream = Readable.from([\"Hello, \", \"world!\"]);\nconst buf = await new Response(stream).arrayBuffer();","[[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["ht_stream_node_uint8array","HowTo","Convert Node.js Readable to Uint8Array","Convert a Node.js Readable stream to a Uint8Array using a Response object's .bytes() method.","[[\"stream\",\"Object\",\"Node.js Readable stream\",\"\",null]]","[[\"uint8array\",\"Object\",\"The resulting Uint8Array\",null,null]]","import {{{{ Readable }}}} from \"stream\";\nconst stream = Readable.from([\"Hello, \", \"world!\"]);\nconst buf = await new Response(stream).bytes();","[[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["ht_stream_node_json","HowTo","Convert Node.js Readable to JSON","Convert a Node.js Readable stream to a JSON object using a Response object.","[[\"stream\",\"Object\",\"Node.js Readable stream\",\"\",null]]","[[\"json\",\"Object\",\"The resulting JSON object\",null,null]]","import {{{{ Readable }}}} from \"stream\";\nconst stream = Readable.from([JSON.stringify({{{{ hello: \"world\" }}}} )]);\nconst json = await new Response(stream).json();","[[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["ht_stream_web_blob_bun","HowTo","Convert ReadableStream to Blob (Bun API)","Convert a ReadableStream to a Blob using Bun's utility function Bun.readableStreamToBlob().","[[\"stream\",\"Object\",\"Web ReadableStream\",\"\",null]]","[[\"blob\",\"Object\",\"The resulting Blob\",null,null]]","const stream = new ReadableStream();\nconst blob = await Bun.readableStreamToBlob(stream);","[[\"feat1\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["ht_stream_web_arraybuffer_bun","HowTo","Convert ReadableStream to ArrayBuffer (Bun API)","Convert a ReadableStream to an ArrayBuffer using Bun's utility function Bun.readableStreamToArrayBuffer().","[[\"stream\",\"Object\",\"Web ReadableStream\",\"\",null]]","[[\"arraybuffer\",\"Object\",\"The resulting ArrayBuffer\",null,null]]","const stream = new ReadableStream();\nconst arrBuf = await Bun.readableStreamToArrayBuffer(stream);","[[\"feat1\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["ht_stream_web_string_bun","HowTo","Convert ReadableStream to string (Bun API)","Convert a ReadableStream to a string using Bun's utility function Bun.readableStreamToText().","[[\"stream\",\"Object\",\"Web ReadableStream\",\"\",null]]","[[\"string\",\"String\",\"The resulting string\",null,null]]","const stream = new ReadableStream();\nconst str = await Bun.readableStreamToText(stream);","[[\"feat1\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["ht_stream_web_uint8array_bun","HowTo","Convert ReadableStream to Uint8Array (Bun API)","Convert a ReadableStream to a Uint8Array using Bun's utility function Bun.readableStreamToBytes().","[[\"stream\",\"Object\",\"Web ReadableStream\",\"\",null]]","[[\"uint8array\",\"Object\",\"The resulting Uint8Array\",null,null]]","const stream = new ReadableStream();\nconst uint8 = await Bun.readableStreamToBytes(stream);","[[\"feat1\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["ht_stream_web_array_bun","HowTo","Convert ReadableStream to array of chunks (Bun API)","Convert a ReadableStream to an array of chunks using Bun's utility function Bun.readableStreamToArray().","[[\"stream\",\"Object\",\"Web ReadableStream\",\"\",null]]","[[\"array\",\"String(JSON Array)\",\"The resulting array of chunks\",null,null]]","const stream = new ReadableStream();\nconst str = await Bun.readableStreamToArray(stream);","[[\"feat1\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_stream_web_json_bun","HowTo","Convert ReadableStream to JSON (Bun API)","Convert a ReadableStream to a JSON object using Bun's utility function Bun.readableStreamToJSON().","[[\"stream\",\"Object\",\"Web ReadableStream\",\"\",null]]","[[\"json\",\"Object\",\"The resulting JSON object\",null,null]]","const stream = new ReadableStream();\nconst json = await Bun.readableStreamToJSON(stream);","[[\"feat1\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["ht_codesign_macos","HowTo","Codesign macOS executable","Codesign a single-file JavaScript executable compiled by Bun on macOS.","[[\"executable_path\",\"String\",\"Path to the compiled executable\",\"\",\"./myapp\"],[\"identity_fingerprint\",\"String\",\"Fingerprint of the signing identity\",\"\",\"XXXXXXXXXX\"],[\"entitlements_path\",\"String\",\"Path to the entitlements plist file\",\"null\",\"entitlements.plist\"]]","[]","bun build --compile ./path/to/entry.ts --outfile {executable_path}\nsecurity find-identity -v -p codesigning\ncodesign --entitlements {entitlements_path,null} -vvvv --deep --sign \"{identity_fingerprint}\" {executable_path} --force\ncodesign -vvv --verify {executable_path}","[[\"feat2\",\"Feat\"],[\"howto11\",\"HowTo\"],[\"co_entitlements_plist\",\"CfgObj\"]]","chunk_1"]
["co_entitlements_plist","CfgObj","entitlements.plist","Configuration file for macOS codesigning entitlements, used by the `codesign` tool.","[]","[]","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>com.apple.security.cs.allow-jit</key>\n    <true/>\n    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>\n    <true/>\n    <key>com.apple.security.cs.disable-executable-page-protection</key>\n    <true/>\n    <key>com.apple.security.cs.allow-dyld-environment-variables</key>\n    <true/>\n    <key>com.apple.security.cs.disable-library-validation</key>\n    <true/>\n</dict>\n</plist>","[[\"ht_codesign_macos\",\"HowTo\"],[\"feat1\",\"Feat\"]]","chunk_1"]
["ft_webkit_inspector","Feat","WebKit Inspector Protocol support","Bun supports the WebKit Inspector Protocol, enabling debugging with compatible tools like the VS Code extension or the web debugger.","[]","[]","","[[\"feat1\",\"Feat\"],[\"ht_debug_vscode\",\"HowTo\"],[\"ht_debug_web\",\"HowTo\"]]","chunk_1"]
["ht_debug_vscode","HowTo","Debug with VS Code extension","Debug Bun code interactively using the official VS Code extension, supporting breakpoints.","[[\"file_path\",\"String\",\"Path to the file to debug\",\"\",null]]","[]","Open the Command Palette (Ctrl+Shift+P / Cmd+Shift+P) and run 'Bun: Debug File' with the target file open.","[[\"feat2\",\"Feat\"],[\"ft_webkit_inspector\",\"Feat\"]]","chunk_1"]
["ht_debug_web","HowTo","Debug with web debugger","Debug Bun code interactively using the built-in web debugger (debug.bun.sh).","[[\"file_path\",\"String\",\"Path to the file to debug\",\"\",null]]","[]","bun --inspect {file_path}\nOpen the printed debug.bun.sh URL in a web browser.","[[\"feat1\",\"Feat\"],[\"feat2\",\"Feat\"],[\"ft_webkit_inspector\",\"Feat\"]]","chunk_1"]
["ft_define_constant","Feat","Static Global/Constant Definition (--define)","Feature to define and replace statically-analyzable constants and globals at runtime or build time, enabling dead code elimination.","[]","[]","","[[\"feat1\",\"Feat\"],[\"feat2\",\"Feat\"],[\"howto10\",\"HowTo\"],[\"ht_define_constant\",\"HowTo\"]]","chunk_1"]
["ht_define_constant","HowTo","Define static global/constant (--define)","Define or replace a global identifier or property with a constant value at runtime or build time using the --define flag.","[[\"identifier\",\"String\",\"Identifier or property path to define\",\"\",\"process.env.NODE_ENV\"],[\"value\",\"String\",\"The constant value (string, identifier, JSON)\",\"\",null]]","[]","bun --define {identifier}=\"{value}\" src/index.ts\nbun build --define {identifier}=\"{value}\" src/index.ts","[[\"ft_define_constant\",\"Feat\"],[\"feat2\",\"Feat\"],[\"feat1\",\"Feat\"],[\"howto10\",\"HowTo\"]]","chunk_1"]
["ht_fs_rmdir_promise","HowTo","Delete directory (node:fs/promises)","Recursively delete a directory and its contents using Node.js fs/promises.rm.","[[\"directory_path\",\"String\",\"Path to the directory\",\"\",null],[\"recursive\",\"Boolean\",\"Delete subdirectories and contents\",\"T\",\"T\"],[\"force\",\"Boolean\",\"Don't throw error if directory doesn't exist\",\"T\",\"T\"]אים",","T"]]","[]","import {{{{ rm }}}} from \"node:fs/promises\";\nawait rm(\"{directory_path}\", {{ recursive: {recursive,T}, force: {force,T} }});","[[\"feat12\",\"Feat\"],[\"feat16\",\"Feat\"]]","chunk_1"]
["ht_fs_rmdir_try_catch","HowTo","Delete directory (node:fs/promises, handle ENOENT)","Recursively delete a directory, handling the 'directory not found' error, using Node.js fs/promises.rm.","[[\"directory_path\",\"String\",\"Path to the directory\",\"\",null],[\"recursive\",\"Boolean\",\"Delete subdirectories and contents\",\"T\",\"T\"]]","[]","import {{{{ rm }}}} from \"node:fs/promises\";\ntry {\n  await rm(\"{directory_path}\", {{ recursive: {recursive,T} }});\n} catch (error) {\n  if (error.code === \"ENOENT\") {\n    console.log(\"Directory doesn't exist\");\n  } else {\n    throw error;\n  }\n}","[[\"feat12\",\"Feat\"],[\"feat16\",\"Feat\"],[\"ht_fs_rmdir_promise\",\"HowTo\"]]","chunk_1"]
["ht_file_delete_bun","HowTo","Delete file (Bun API)","Delete a file using the Bun.file().delete() method.","[[\"file_path\",\"String\",\"Path to the file\",\"\",null]]","[[\"exists_after\",\"Boolean\",\"Whether the file exists after deletion\",null,null]]","const file = Bun.file(\"{file_path}\");\nawait file.delete();\nconst exists = await file.exists();","[[\"feat16\",\"Feat\"]]","chunk_1"]
["ft_native_imports","Feat","Native Imports (JSON, TOML, etc.)","Bun natively supports importing various file types like JSON and TOML directly.","[]","[]","","[[\"feat23\",\"Feat\"],[\"ht_import_json\",\"HowTo\"],[\"ht_import_toml\",\"HowTo\"],[\"ht_import_html_text\",\"HowTo\"]]","chunk_1"]
["ht_import_html_text","HowTo","Import HTML as text","Import an HTML file as a string using import attributes.","[[\"file_path\",\"String\",\"Path to the HTML file\",\"\",null]]","[[\"html_content\",\"String\",\"The HTML content as a string\",null,null]]","import html from \"{file_path}\" with {{ type: \"text\" }};","[[\"feat23\",\"Feat\"],[\"ft_native_imports\",\"Feat\"]]","chunk_1"]
["ht_import_json","HowTo","Import JSON file","Import a JSON file directly into JavaScript/TypeScript.","[[\"file_path\",\"String\",\"Path to the JSON file\",\"\",null]]","[[\"json_object\",\"Object\",\"The parsed JSON object\",null,null]]","import data from \"{file_path}\";\n// or\nimport data from \"{file_path}\" with {{ type: \"json\" }};","[[\"feat23\",\"Feat\"],[\"ft_native_imports\",\"Feat\"]]","chunk_1"]
["ht_import_toml","HowTo","Import TOML file","Import a TOML file directly into JavaScript/TypeScript.","[[\"file_path\",\"String\",\"Path to the TOML file\",\"\",null]]","[[\"toml_object\",\"Object\",\"The parsed TOML object\",null,null]]","import data from \"{file_path}\";","[[\"feat23\",\"Feat\"],[\"ft_native_imports\",\"Feat\"]]","chunk_1"]
["ht_heap_snapshot","HowTo","Inspect memory (Heap Snapshots)","Create V8 heap snapshots using node:v8 for memory debugging with tools like Chrome DevTools.","[]","[[\"snapshot_path\",\"String\",\"Path to the generated snapshot file\",null,null]]","import v8 from \"node:v8\";\nconst snapshotPath = v8.writeHeapSnapshot();","[[\"feat12\",\"Feat\"],[\"feat1\",\"Feat\"],[\"ft_webkit_inspector\",\"Feat\"]]","chunk_1"]
["co_setup_bun_action","CfgObj","setup-bun GitHub Action","GitHub Action provided by Oven to install Bun in CI/CD workflows.","[[\"bun-version\",\"String\",\"Version specifier for Bun\",\"latest\",\"1.2.0\"]]","[]","uses: oven-sh/setup-bun@v2\nwith:\n  bun-version: {bun-version,latest}","[[\"ht_cicd_github_actions\",\"HowTo\"]]","chunk_1"]
["ht_cicd_github_actions","HowTo","Install and run Bun in GitHub Actions","Set up and run Bun commands within a GitHub Actions workflow.","[]","[]","jobs:\n  my-job:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: {setup_bun_action,oven-sh/setup-bun@v2}\n      - run: bun install","[[\"feat2\",\"Feat\"],[\"co_setup_bun_action\",\"CfgObj\"],[\"howto3\",\"HowTo\"],[\"howto1\",\"HowTo\"],[\"howto2\",\"HowTo\"],[\"howto9\",\"HowTo\"]]","chunk_1"]
["co_tsconfig_bun_options","CfgObj","tsconfig.json (Bun Recommended Options)","Recommended TypeScript compiler options in tsconfig.json for a Bun project, enabling features like JSX, top-level await, import attributes.","[]","[]","{\n  \"compilerOptions\": {\n    \"lib\": [\"ESNext\"],\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"moduleDetection\": \"force\",\n    \"jsx\": \"react-jsx\",\n    \"allowJs\": true,\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"verbatimModuleSyntax\": true,\n    \"noEmit\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedIndexedAccess\": true\n  }\n}","[[\"feat14\",\"Feat\"],[\"ht_ts_install_types\",\"HowTo\"],[\"ht_ts_remap_paths\",\"HowTo\"]]","chunk_1"]
["ht_ts_install_types","HowTo","Install TypeScript declarations","Install TypeScript definition files for Bun's built-in APIs using @types/bun.","[]","[]","bun add -d @types/bun","[[\"feat14\",\"Feat\"],[\"feat2\",\"Feat\"]]","chunk_1"]
["ht_ts_remap_paths","HowTo","Re-map import paths (tsconfig.json paths)","Configure import path aliases using the `paths` field in tsconfig.json.","[[\"paths_config\",\"Object\",\"The 'paths' configuration object\",\"\",null]]","[]","import {{{{ z }}}} from \"my-custom-name\"; // imports from \"zod\"","[[\"feat14\",\"Feat\"],[\"co_tsconfig_bun_options\",\"CfgObj\"]]","chunk_1"]
["co_env_files","CfgObj",".env files","Configuration files (.env, .env.local, etc.) for loading environment variables automatically.","[]","[]","#.env\nFOO=hello\nBAR=world","[[\"feat1\",\"Feat\"],[\"ht_set_env\",\"HowTo\"],[\"ht_read_env\",\"HowTo\"]]","chunk_1"]
["ht_read_env","HowTo","Read environment variables","Access current environment variables using process.env or Bun.env.","[]","[[\"env_value\",\"String\",\"The value of the environment variable\",null,null]]","process.env.API_TOKEN;\nBun.env.API_TOKEN;","[[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"],[\"co_env_files\",\"CfgObj\"]]","chunk_1"]
["ht_set_env","HowTo","Set environment variables","Set environment variables via .env files or the command line.","[[\"variable_name\",\"String\",\"Name of the variable\",\"\",\"FOO\"],[\"variable_value\",\"String\",\"Value of the variable\",\"\",\"helloworld\"]]","[]","FOO={variable_value} bun run dev # Linux/macOS\nset FOO={variable_value} && bun run dev # Windows CMD","[[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"],[\"co_env_files\",\"CfgObj\"]]","chunk_1"]
["ht_shell_run_command","HowTo","Run Shell command","Run cross-platform shell commands using the Bun Shell $ function.","[[\"command\",\"String\",\"The shell command string\",\"\",\"ls -l\"]]","[[\"output_text\",\"String\",\"Command output as text\",null,null],[\"output_lines\",\"String(JSON Array)\",\"Command output as array of lines\",null,null]]","import {{{{ $ }}}} from \"bun\";\nawait $`{command}`;\nconst output = await $`{command}`.text();\nfor await (const line of $`{command}`.lines()) {{{{ console.log(line); }}}}","[[\"feat31\",\"Feat\"]]","chunk_1"]
["ht_process_nanoseconds","HowTo","Get process uptime (nanoseconds)","Get the total number of nanoseconds the Bun process has been alive.","[]","[[\"uptime_ns\",\"Number\",\"Uptime in nanoseconds\",null,null]]","Bun.nanoseconds();","[[\"feat1\",\"Feat\"]]","chunk_1"]
["ht_process_listen_sigint","HowTo","Listen for CTRL+C (SIGINT)","Intercept the CTRL+C signal by listening for the SIGINT event on process.","[]","[]","process.on(\"SIGINT\", () => {{{{ console.log(\"Ctrl-C was pressed\");\n  process.exit(); }}}});","[[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"],[\"ht_process_listen_signals\",\"HowTo\"]]","chunk_1"]
["ht_process_listen_signals","HowTo","Listen to OS signals","Listen for various OS signals or process lifecycle events (exit, beforeExit) using process.on().","[[\"signal\",\"String\",\"Signal name (e.g., 'SIGINT', 'exit')\",\"\",\"SIGINT\"]]","[]","process.on(\"{signal}\", (code) => {{{{ console.log(`Received {signal} with code ${{{{code}}}}}`); }}}});","[[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"],[\"ht_process_listen_sigint\",\"HowTo\"]]","chunk_1"]
["ht_process_parse_argv","HowTo","Parse command-line arguments","Access and parse command-line arguments passed to the Bun process.","[]","[[\"argv\",\"String(JSON Array)\",\"Raw argument vector (array of strings)\",null,null],[\"parsed_values\",\"Object\",\"Parsed flag values\",null,null],[\"parsed_positionals\",\"String(JSON Array)\",\"Parsed positional arguments\",null,null]]","console.log(Bun.argv);\nimport {{{{ parseArgs }}}} from \"util\";\nconst {{{{ values, positionals }}}} = parseArgs({{{{ args: Bun.argv, options: {{ flag1: {{{{ type: 'boolean' }}}}, flag2: {{{{ type: 'string' }}}} }} }}}});","[[\"feat2\",\"Feat\"],[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"]]","chunk_1"]
["ht_process_read_stdin_console","HowTo","Read from stdin (console async iterator)","Read input lines from the process's standard input using the console object as an async iterator.","[]","[[\"line\",\"String\",\"A line read from stdin\",null,null]]","process.stdout.write(\"Prompt: \");\nfor await (const line of console) {{{{ console.log(`You typed: ${{{{line}}}}}`); }}}}","[[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"]]","chunk_1"]
["ht_process_read_stdin_bun","HowTo","Read from stdin (Bun.stdin stream)","Read binary chunks from the process's standard input using Bun.stdin.stream().","[]","[[\"chunk\",\"Object\",\"A Uint8Array chunk read from stdin\",null,null]]","for await (const chunk of Bun.stdin.stream()) {{{{ console.log(`Chunk: ${{{{Buffer.from(chunk).toString()}}}}}`); }}}}","[[\"feat1\",\"Feat\"],[\"feat16\",\"Feat\"]]","chunk_1"]
["ht_spawn_process","HowTo","Spawn child process","Spawn a child process using Bun.spawn().","[[\"command\",\"String(JSON Array)\",\"Command and arguments\",\"\",null],[\"options\",\"Object\",\"Optional configuration object (cwd, env, onExit, etc.)\",null,null]]","[[\"subprocess\",\"Object\",\"The subprocess instance\",null,null]]","const proc = Bun.spawn({command});\nawait proc.exited;","[[\"feat32\",\"Feat\"]]","chunk_1"]
["ht_spawn_read_stdout","HowTo","Read stdout from child process","Consume the stdout stream of a child process spawned with Bun.spawn().","[[\"command\",\"String(JSON Array)\",\"Command and arguments\",\"\",null]]","[[\"stdout_text\",\"String\",\"The stdout content as text\",null,null]]","const proc = Bun.spawn({command});\nconst output = await new Response(proc.stdout).text();","[[\"feat32\",\"Feat\"],[\"ht_spawn_process\",\"HowTo\"]]","chunk_1"]
["ht_spawn_read_stderr","HowTo","Read stderr from child process","Consume the stderr stream of a child process spawned with Bun.spawn().","[[\"command\",\"String(JSON Array)\",\"Command and arguments\",\"\",null]]","[[\"stderr_text\",\"String\",\"The stderr content as text\",null,null]]","const proc = Bun.spawn({command}, {{ stderr: \"pipe\" }});\nconst errors = await Bun.readableStreamToText(proc.stderr);","[[\"feat32\",\"Feat\"],[\"ht_spawn_process\",\"HowTo\"]]","chunk_1"]
["ht_spawn_ipc","HowTo","Spawn child process with IPC","Communicate between parent and child Bun processes using an IPC channel.","[[\"child_script_path\",\"String\",\"Path to the child Bun script\",\"\",\"child.ts\"]]","[]","const child = Bun.spawn([\"bun\", \"{child_script_path}\"], {{ ipc(message, childProc) {{{{ childProc.send(\"Parent received \" + message); }}}} }}});\nchild.send(\"Hello from parent\");\n\n// In child.ts:\nprocess.on(\"message\", (message) => {{{{ console.log(\"Child received: \" + message); }}}});\nprocess.send(\"Hello from child\");","[[\"feat32\",\"Feat\"],[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"],[\"ht_spawn_process\",\"HowTo\"]]","chunk_1"]
["ht_fs_append_promise","HowTo","Append content to file (async node:fs)","Asynchronously append data to a file, creating it if it doesn't exist, using node:fs/promises.appendFile.","[[\"file_path\",\"String\",\"Path to the file\",\"\",null],[\"data\",\"String\",\"Data to append\",\"\",\"data to append\"],[\"encoding\",\"String\",\"File encoding\",\"utf8\",\"utf8\"]]","[]","import {{{{ appendFile }}}} from \"node:fs/promises\";\nawait appendFile(\"{file_path}\", \"{data}\", \"{encoding,utf8}\");","[[\"feat12\",\"Feat\"],[\"feat16\",\"Feat\"]]","chunk_1"]
["ht_fs_append_sync","HowTo","Append content to file (sync node:fs)","Synchronously append data to a file using node:fs.appendFileSync.","[[\"file_path\",\"String\",\"Path to the file\",\"\",null],[\"data\",\"String\",\"Data to append\",\"\",\"data to append\"],[\"encoding\",\"String\",\"File encoding\",\"utf8\",\"utf8\"]]","[]","import {{{{ appendFileSync }}}} from \"node:fs\";\nappendFileSync(\"{file_path}\", \"{data}\", \"{encoding,utf8}\");","[[\"feat12\",\"Feat\"],[\"feat16\",\"Feat\"],[\"ht_fs_append_promise\",\"HowTo\"]]","chunk_1"]
["ft_filesink","Feat","FileSink (Incremental File Writing)","API for efficiently writing to files incrementally by buffering and flushing data.","[]","[]","","[[\"feat16\",\"Feat\"],[\"ht_file_write_incremental_filesink\",\"HowTo\"]]","chunk_1"]
["ht_file_copy_bun","HowTo","Copy file (Bun.write)","Copy a file from one location to another using Bun.write().","[[\"source_path\",\"String\",\"Path to the source file\",\"\",\"/path/to/original.txt\"],[\"destination_path\",\"String\",\"Path to the destination file\",\"\",\"/path/to/copy.txt\"]]","[]","const file = Bun.file(\"{source_path}\");\nawait Bun.write(\"{destination_path}\", file);","[[\"feat16\",\"Feat\"]]","chunk_1"]
["ht_write_blob_bun","HowTo","Write Blob to file (Bun.write)","Write a Blob (or BunFile) to disk using Bun.write().","[[\"file_path\",\"String\",\"Path to the file\",\"\",\"/path/to/file.txt\"],[\"data\",\"Object\",\"Blob or BunFile data to write\",\"\",null]]","[[\"bytes_written\",\"Number\",\"Number of bytes written\",null,null]]","const path = \"{file_path}\";\nawait Bun.write(path, {data});","[[\"feat16\",\"Feat\"],[\"ft_binary_data\",\"Feat\"]]","chunk_1"]
["ht_file_write_incremental_filesink","HowTo","Write file incrementally (FileSink)","Write to a file incrementally using the FileSink API.","[[\"file_path\",\"String\",\"Path to the file\",\"\",null],[\"data_chunks\",\"String(JSON Array)\",\"Array of strings or binary data chunks\",\"[]\",null],[\"highWaterMark\",\"Number\",\"Buffer size in bytes\",\"null\",\"1024 * 1024\"]]","[]","const file = Bun.file(\"{file_path}\");\nconst writer = file.writer({{{{ highWaterMark: {highWaterMark,null} }}}});\nwriter.write(\"lorem\");\nwriter.flush();\nwriter.end();","[[\"ft_filesink\",\"Feat\"]]","chunk_1"]
["ht_write_file_stdout_bun","HowTo","Write file to stdout (Bun.write)","Write the contents of a file to standard output using Bun.write(). Similar to the `cat` command.","[[\"file_path\",\"String\",\"Path to the file\",\"\",null]]","[]","const path = \"{file_path}\";\nconst file = Bun.file(path);\nawait Bun.write(Bun.stdout, file);","[[\"feat16\",\"Feat\"],[\"feat1\",\"Feat\"]]","chunk_1"]
["ht_write_stream_to_file_bun","HowTo","Write ReadableStream to file (Bun.write)","Write a ReadableStream to disk using Bun.write().","[[\"file_path\",\"String\",\"Path to the file\",\"\",\"./file.txt\"],[\"stream\",\"Object\",\"The ReadableStream to write\",\"\",null]]","[[\"bytes_written\",\"Number\",\"Number of bytes written\",null,null]]","const stream: ReadableStream = ...;\nconst path = \"{file_path}\";\nconst response = new Response(stream);\nawait Bun.write(path, response);","[[\"feat16\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_write_response_to_file_bun","HowTo","Write Response to file (Bun.write)","Write an HTTP Response body to disk using Bun.write().","[[\"file_path\",\"String\",\"Path to the file\",\"\",\"./file.txt\"],[\"response\",\"Object\",\"The Response object to write\",\"\",null]]","[[\"bytes_written\",\"Number\",\"Number of bytes written\",null,null]]","const result = await fetch(\"https://bun.sh\");\nconst path = \"{file_path}\";\nawait Bun.write(path, result);","[[\"feat16\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_write_string_to_file_bun","HowTo","Write string to file (Bun.write)","Write a string to disk using Bun.write(). Handles relative/absolute paths and BunFile destinations.","[[\"destination\",\"String\",\"Path or BunFile destination\",\"\",\"./file.txt\"],[\"data\",\"String\",\"String data to write\",\"\",\"Lorem ipsum\"]]","[[\"bytes_written\",\"Number\",\"Number of bytes written\",null,null]]","const path = \"{destination}\";\nawait Bun.write(path, \"{data}\");","[[\"feat16\",\"Feat\"]]","chunk_1"]
["ht_write_stdout_console","HowTo","Write to stdout (console.log)","Write data to standard output using console.log(). Appends a line break.","[[\"data\",\"String\",\"Data to print\",\"\",\"Lorem ipsum\"]]","[]","console.log(\"{data}\");","[[\"feat12\",\"Feat\"]]","chunk_1"]
["ht_write_stdout_bun","HowTo","Write to stdout (Bun.write)","Write data to standard output using Bun.write(Bun.stdout, data). Does not append a line break automatically.","[[\"data\",\"String\",\"Data to write\",\"\",\"Lorem ipsum\"]]","[[\"bytes_written\",\"Number\",\"Number of bytes written\",null,null]]","await Bun.write(Bun.stdout, \"{data}\");","[[\"feat16\",\"Feat\"],[\"feat1\",\"Feat\"]]","chunk_1"]
["ht_http_serve_tls","HowTo","Configure TLS for HTTP server","Configure TLS/SSL certificates and keys for a Bun.serve HTTP server.","[[\"cert_file\",\"String\",\"Path to the TLS certificate file (PEM)\",\"\",\"cert.pem\"],[\"key_file\",\"String\",\"Path to the TLS private key file (PEM)\",\"\",\"key.pem\"],[\"ca_files\",\"String(JSON Array)\",\"Array of paths to trusted CA certificate files\",\"[]\",\"['ca1.pem', 'ca2.pem']\"]]","[]","const server = Bun.serve({{{{ fetch: request => new Response(\"Welcome!\"), tls: {{{{ cert: Bun.file(\"{cert_file}\"), key: Bun.file(\"{key_file}\"), ca: {{{{ca_files,[]}}}}.map(f => Bun.file(f)) }}}} }}});","[[\"howto20\",\"HowTo\"]]","chunk_1"]
["ht_http_fetch_unix","HowTo","Fetch with Unix Domain Sockets","Send HTTP requests over a Unix domain socket using the `unix` fetch option.","[[\"socket_path\",\"String\",\"Path to the Unix domain socket\",\"\",\"/var/run/docker.sock\"],[\"url\",\"String\",\"URL for the request (hostname is often ignored)\",\"\",\"http://localhost/info\"],[\"options\",\"Object\",\"Fetch options (method, headers, body, etc.)\",null,null]]","[[\"response\",\"Object\",\"The fetch Response object\",null,null]]","const unix = \"{socket_path}\";\nconst response = await fetch(\"{url}\", {{ unix }});","[[\"feat13\",\"Feat\"],[\"howto21\",\"HowTo\"]]","chunk_1"]
["ht_http_hot_reload","HowTo","Hot reload HTTP server (--hot)","Enable hot reloading for a Bun.serve HTTP server using the --hot flag.","[[\"script_path\",\"String\",\"Path to the server script using Bun.serve\",\"\",\"index.ts\"]]","[]","bun --hot run {script_path}","[[\"howto20\",\"HowTo\"],[\"feat26\",\"Feat\"],[\"feat2\",\"Feat\"]]","chunk_1"]
["ht_http_fetch_proxy","HowTo","Proxy HTTP requests (fetch)","Send HTTP requests through an HTTP or HTTPS proxy using the `proxy` fetch option or environment variables.","[[\"url\",\"String\",\"URL for the request\",\"\",\"https://example.com\"],[\"proxy_url\",\"String\",\"URL of the proxy server (e.g., https://user:pass@host:port)\",\"null\",\"https://proxy.example.com:8080\"]]","[[\"response\",\"Object\",\"The fetch Response object\",null,null]]","await fetch(\"{url}\", {{ proxy: \"{proxy_url,null}\" }}});\n// or set env:\n// HTTPS_PROXY={proxy_url} bun run index.ts","[[\"feat13\",\"Feat\"],[\"howto21\",\"HowTo\"],[\"co_env_files\",\"CfgObj\"]]","chunk_1"]
["ht_http_cluster","HowTo","Start cluster of HTTP servers","Run multiple Bun.serve HTTP server processes sharing the same port using `reusePort` for load balancing (Linux only).","[[\"script_path\",\"String\",\"Path to the server script using Bun.serve with reusePort\",\"\",\"./server.ts\"],[\"port\",\"Number\",\"Port to listen on\",\"8080\",null]]","[]","import {{{{ spawn }}}} from \"bun\";\nconst cpus = navigator.hardwareConcurrency;\nfor (let i = 0; i < cpus; i++) {{{{ spawn({{{{ cmd: [\"bun\", \"{script_path}\"], stdio: [\"inherit\", \"inherit\", \"inherit\"] }}}} }); }}}","[[\"howto20\",\"HowTo\"],[\"feat32\",\"Feat\"]]","chunk_1"]
["ht_http_stream_file","HowTo","Stream file as HTTP Response","Stream the contents of a file from disk as an HTTP Response. Content-Type is inferred from the file.","[[\"file_path\",\"String\",\"Path to the file\",\"\",\"/path/to/file.txt\"]]","[[\"response\",\"Object\",\"The Response object streaming the file\",null,null]]","const path = \"{file_path}\";\nconst file = Bun.file(path);\nconst resp = new Response(file);","[[\"howto20\",\"HowTo\"],[\"feat16\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_http_stream_async_iterator","HowTo","Streaming HTTP Server (Async Iterators)","Stream data to an HTTP client using an async generator function or async iterable as the Response body.","[[\"port\",\"Number\",\"Port to listen on\",\"3000\",null],[\"async_iterable\",\"Object\",\"The async iterable (e.g., async function*) for the response body\",\"\",null]]","[]","Bun.serve({{{{ port: {port,3000}, fetch(req) {{{{ return new Response({{{{async_iterable}}}}); }}}} }}});","[[\"howto20\",\"HowTo\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_http_stream_node_stream","HowTo","Streaming HTTP Server (Node.js Streams)","Stream data to an HTTP client using a Node.js Readable stream as the Response body.","[[\"port\",\"Number\",\"Port to listen on\",\"3000\",null],[\"node_readable_stream\",\"Object\",\"The Node.js Readable stream for the response body\",\"\",null]]","[]","import {{{{ Readable }}}} from \"stream\";\nimport {{{{ serve }}}} from \"bun\";\nserve({{{{ port: {port,3000}, fetch(req) {{{{ return new Response({{{{node_readable_stream}}}}); }}}} }}});","[[\"howto20\",\"HowTo\"],[\"feat13\",\"Feat\"],[\"feat12\",\"Feat\"]]","chunk_1"]
["ht_http_upload_formdata","HowTo","Upload files via HTTP (FormData)","Handle file uploads sent via multipart/form-data HTTP requests using req.formData().","[[\"request\",\"Object\",\"The incoming HTTP Request object\",\"\",null]]","[[\"formdata\",\"Object\",\"The parsed FormData object\",null,null]]","async fetch(req) {{{{ const formdata = await req.formData();\n  const file = formdata.get('profilePicture');\n  if (file) await Bun.write(file.name, file); }}}}","[[\"howto20\",\"HowTo\"],[\"feat13\",\"Feat\"],[\"feat16\",\"Feat\"]]","chunk_1"]
["ft_binary_data","Feat","Binary Data Handling","Comprehensive support and utilities for handling binary data types like Blob, Buffer, ArrayBuffer, Uint8Array, and DataView, including conversions between them.","[]","[]","","[[\"feat1\",\"Feat\"],[\"feat12\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ht_stream_node_blob\",\"HowTo\"],[\"ht_stream_node_string\",\"HowTo\"],[\"ht_stream_node_arraybuffer\",\"HowTo\"],[\"ht_stream_node_uint8array\",\"HowTo\"],[\"ht_stream_node_json\",\"HowTo\"],[\"ht_stream_web_blob_bun\",\"HowTo\"],[\"ht_stream_web_arraybuffer_bun\",\"HowTo\"],[\"ht_stream_web_string_bun\",\"HowTo\"],[\"ht_stream_web_uint8array_bun\",\"HowTo\"],[\"ht_stream_web_json_bun\",\"HowTo\"],[\"ht_binary_blob_to_dataview\",\"HowTo\"],[\"ht_binary_blob_to_stream\",\"HowTo\"],[\"ht_binary_blob_to_string\",\"HowTo\"],[\"ht_binary_blob_to_uint8array\",\"HowTo\"],[\"ht_binary_blob_to_arraybuffer\",\"HowTo\"],[\"ht_binary_buffer_to_blob\",\"HowTo\"],[\"ht_binary_buffer_to_readablestream\",\"HowTo\"],[\"ht_binary_buffer_to_string\",\"HowTo\"],[\"ht_binary_buffer_to_uint8array\",\"HowTo\"],[\"ht_binary_buffer_to_arraybuffer\",\"HowTo\"],[\"ht_binary_dataview_to_string\",\"HowTo\"],[\"ht_binary_uint8array_to_blob\",\"HowTo\"],[\"ht_binary_uint8array_to_buffer\",\"HowTo\"],[\"ht_binary_uint8array_to_dataview\",\"HowTo\"],[\"ht_binary_uint8array_to_readablestream\",\"HowTo\"],[\"ht_binary_uint8array_to_string\",\"HowTo\"],[\"ht_binary_uint8array_to_arraybuffer\",\"HowTo\"],[\"ht_binary_arraybuffer_to_blob\",\"HowTo\"],[\"ht_binary_arraybuffer_to_buffer\",\"HowTo\"],[\"ht_binary_arraybuffer_to_string\",\"HowTo\"],[\"ht_binary_arraybuffer_to_uint8array\",\"HowTo\"],[\"ht_binary_arraybuffer_to_array\",\"HowTo\"],[\"ht_write_blob_bun\",\"HowTo\"]],"chunk_1"]
["ht_binary_blob_to_dataview","HowTo","Convert Blob to DataView","Convert a Blob to a DataView via an ArrayBuffer.","[[\"blob\",\"Object\",\"The Blob instance\",\"\",null]]","[[\"dataview\",\"Object\",\"The resulting DataView\",null,null]]","const blob = new Blob([\"hello world\"]);\nconst arr = new DataView(await blob.arrayBuffer());","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ht_binary_blob_to_arraybuffer\",\"HowTo\"]]","chunk_1"]
["ht_binary_blob_to_stream","HowTo","Convert Blob to ReadableStream","Convert a Blob to a ReadableStream using its .stream() method.","[[\"blob\",\"Object\",\"The Blob instance\",\"\",null]]","[[\"stream\",\"Object\",\"The resulting ReadableStream\",null,null]]","const blob = new Blob([\"hello world\"]);\nconst stream = await blob.stream();","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_blob_to_string","HowTo","Convert Blob to string","Convert a Blob to a string using its .text() method.","[[\"blob\",\"Object\",\"The Blob instance\",\"\",null]]","[[\"string\",\"String\",\"The resulting string\",null,null]]","const blob = new Blob([\"hello world\"]);\nconst str = await blob.text();","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_blob_to_uint8array","HowTo","Convert Blob to Uint8Array","Convert a Blob to a Uint8Array via an ArrayBuffer.","[[\"blob\",\"Object\",\"The Blob instance\",\"\",null]]","[[\"uint8array\",\"Object\",\"The resulting Uint8Array\",null,null]]","const blob = new Blob([\"hello world\"]);\nconst arr = new Uint8Array(await blob.arrayBuffer());","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ht_binary_blob_to_arraybuffer\",\"HowTo\"],[\"ht_binary_arraybuffer_to_uint8array\",\"HowTo\"]]","chunk_1"]
["ht_binary_blob_to_arraybuffer","HowTo","Convert Blob to ArrayBuffer","Convert a Blob to an ArrayBuffer using its .arrayBuffer() method.","[[\"blob\",\"Object\",\"The Blob instance\",\"\",null]]","[[\"arraybuffer\",\"Object\",\"The resulting ArrayBuffer\",null,null]]","const blob = new Blob([\"hello world\"]);\nconst buf = await blob.arrayBuffer();","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_buffer_to_blob","HowTo","Convert Buffer to Blob","Create a Blob from a Node.js Buffer.","[[\"buffer\",\"Object\",\"The Buffer instance\",\"\",null]]","[[\"blob\",\"Object\",\"The resulting Blob\",null,null]]","const buf = Buffer.from(\"hello\");\nconst blob = new Blob([buf]);","[[\"ft_binary_data\",\"Feat\"],[\"feat12\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_buffer_to_readablestream","HowTo","Convert Buffer to ReadableStream","Create a ReadableStream from a Node.js Buffer, optionally streaming in chunks via an intermediate Blob.","[[\"buffer\",\"Object\",\"The Buffer instance\",\"\",null],[\"chunk_size\",\"Number\",\"Optional chunk size for streaming\",\"null\",null]]","[[\"stream\",\"Object\",\"The resulting ReadableStream\",null,null]]","const buf = Buffer.from(\"hello world\");\nconst blob = new Blob([buf]);\nconst stream = blob.stream({chunk_size,null});","[[\"ft_binary_data\",\"Feat\"],[\"feat12\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ht_binary_buffer_to_blob\",\"HowTo\"],[\"ht_binary_blob_to_stream\",\"HowTo\"]]","chunk_1"]
["ht_binary_buffer_to_string","HowTo","Convert Buffer to string","Convert a Node.js Buffer to a string using its .toString() method.","[[\"buffer\",\"Object\",\"The Buffer instance\",\"\",null],[\"encoding\",\"String\",\"Character encoding\",\"utf8\",\"utf8\"],[\"start\",\"Number\",\"Start index\",\"0\",null],[\"end\",\"Number\",\"End index\",\"null\",null]]","[[\"string\",\"String\",\"The resulting string\",null,null]]","const buf = Buffer.from(\"hello world!\");\nconst str = buf.toString(\"{encoding,utf8}\", {start,null}, {end,null});","[[\"ft_binary_data\",\"Feat\"],[\"feat12\",\"Feat\"]]","chunk_1"]
["ht_binary_buffer_to_uint8array","HowTo","Convert Buffer to Uint8Array","A Node.js Buffer is already a Uint8Array, no explicit conversion needed.","[[\"buffer\",\"Object\",\"The Buffer instance\",\"\",null]]","[[\"uint8array\",\"Object\",\"The same Buffer instance (as Uint8Array)\",null,null]]","const buf = Buffer.alloc(64);\nbuf instanceof Uint8Array; // => true","[[\"ft_binary_data\",\"Feat\"],[\"feat12\",\"Feat\"]]","chunk_1"]
["ht_binary_buffer_to_arraybuffer","HowTo","Convert Buffer to ArrayBuffer","Get the underlying ArrayBuffer of a Node.js Buffer.","[[\"buffer\",\"Object\",\"The Buffer instance\",\"\",null]]","[[\"arraybuffer\",\"Object\",\"The underlying ArrayBuffer\",null,null]]","const nodeBuf = Buffer.from(\"hello\");\nconst arrBuf = nodeBuf.buffer;","[[\"ft_binary_data\",\"Feat\"],[\"feat12\",\"Feat\"]]","chunk_1"]
["ht_binary_dataview_to_string","HowTo","Convert DataView to string","Convert a DataView containing text data to a string using TextDecoder.","[[\"dataview\",\"Object\",\"The DataView instance\",\"\",null]]","[[\"string\",\"String\",\"The resulting string\",null,null]]","const dv = new DataView(new ArrayBuffer(0));\nconst decoder = new TextDecoder();\nconst str = decoder.decode(dv);","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_uint8array_to_blob","HowTo","Convert Uint8Array to Blob","Create a Blob from a Uint8Array.","[[\"uint8array\",\"Object\",\"The Uint8Array instance\",\"\",null]]","[[\"blob\",\"Object\",\"The resulting Blob\",null,null]]","const arr = new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f]);\nconst blob = new Blob([arr]);","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_uint8array_to_buffer","HowTo","Convert Uint8Array to Buffer","Create a Node.js Buffer from a Uint8Array.","[[\"uint8array\",\"Object\",\"The Uint8Array instance\",\"\",null]]","[[\"buffer\",\"Object\",\"The resulting Buffer\",null,null]]","const arr = new Uint8Array(0);\nconst buf = Buffer.from(arr);","[[\"ft_binary_data\",\"Feat\"],[\"feat12\",\"Feat\"]]","chunk_1"]
["ht_binary_uint8array_to_dataview","HowTo","Convert Uint8Array to DataView","Create a DataView viewing the same data as a Uint8Array.","[[\"uint8array\",\"Object\",\"The Uint8Array instance\",\"\",null]]","[[\"dataview\",\"Object\",\"The resulting DataView\",null,null]]","const arr = new Uint8Array(64);\nconst dv = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_uint8array_to_readablestream","HowTo","Convert Uint8Array to ReadableStream","Create a ReadableStream from a Uint8Array, optionally streaming in chunks via an intermediate Blob.","[[\"uint8array\",\"Object\",\"The Uint8Array instance\",\"\",null],[\"chunk_size\",\"Number\",\"Optional chunk size for streaming\",\"null\",null]]","[[\"stream\",\"Object\",\"The resulting ReadableStream\",null,null]]","const arr = new Uint8Array(64);\nconst blob = new Blob([arr]);\nconst stream = blob.stream({chunk_size,null});","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ht_binary_uint8array_to_blob\",\"HowTo\"],[\"ht_binary_blob_to_stream\",\"HowTo\"]]","chunk_1"]
["ht_binary_uint8array_to_string","HowTo","Convert Uint8Array to string","Convert a Uint8Array containing text data to a string using TextDecoder.","[[\"uint8array\",\"Object\",\"The Uint8Array instance\",\"\",null]]","[[\"string\",\"String\",\"The resulting string\",null,null]]","const arr = new Uint8Array([104, 101, 108, 108, 111]);\nconst decoder = new TextDecoder();\nconst str = decoder.decode(arr);","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_uint8array_to_arraybuffer","HowTo","Convert Uint8Array to ArrayBuffer","Get the underlying ArrayBuffer of a Uint8Array.","[[\"uint8array\",\"Object\",\"The Uint8Array instance\",\"\",null]]","[[\"arraybuffer\",\"Object\",\"The underlying ArrayBuffer\",null,null]]","const arr = new Uint8Array(64);\narr.buffer;","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_arraybuffer_to_blob","HowTo","Convert ArrayBuffer to Blob","Create a Blob from an ArrayBuffer.","[[\"arraybuffer\",\"Object\",\"The ArrayBuffer instance\",\"\",null],[\"type\",\"String\",\"MIME type of the blob\",\"null\",\"application/octet-stream\"]]","[[\"blob\",\"Object\",\"The resulting Blob\",null,null]]","const buf = new ArrayBuffer(64);\nconst blob = new Blob([buf], {{ type: \"{type,null}\" }}});","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_arraybuffer_to_buffer","HowTo","Convert ArrayBuffer to Buffer","Create a Node.js Buffer from an ArrayBuffer.","[[\"arraybuffer\",\"Object\",\"The ArrayBuffer instance\",\"\",null],[\"byte_offset\",\"Number\",\"Offset in bytes\",\"0\",null],[\"byte_length\",\"Number\",\"Number of bytes\",\"null\",null]]","[[\"buffer\",\"Object\",\"The resulting Buffer\",null,null]]","const arrBuffer = new ArrayBuffer(64);\nconst nodeBuffer = Buffer.from(arrBuffer, {byte_offset,0}, {byte_length,null});","[[\"ft_binary_data\",\"Feat\"],[\"feat12\",\"Feat\"]]","chunk_1"]
["ht_binary_arraybuffer_to_string","HowTo","Convert ArrayBuffer to string","Convert an ArrayBuffer containing text data to a string using TextDecoder.","[[\"arraybuffer\",\"Object\",\"The ArrayBuffer instance\",\"\",null]]","[[\"string\",\"String\",\"The resulting string\",null,null]]","const buf = new ArrayBuffer(64);\nconst decoder = new TextDecoder();\nconst str = decoder.decode(buf);","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_arraybuffer_to_uint8array","HowTo","Convert ArrayBuffer to Uint8Array","Create a Uint8Array view over an ArrayBuffer.","[[\"arraybuffer\",\"Object\",\"The ArrayBuffer instance\",\"\",null],[\"byte_offset\",\"Number\",\"Offset in bytes\",\"0\",null],[\"byte_length\",\"Number\",\"Number of bytes\",\"null\",null]]","[[\"uint8array\",\"Object\",\"The resulting Uint8Array view\",null,null]]","const buffer = new ArrayBuffer(64);\nconst arr = new Uint8Array(buffer, {byte_offset,0}, {byte_length,null});","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"]]","chunk_1"]
["ht_binary_arraybuffer_to_array","HowTo","Convert ArrayBuffer to array of numbers","Convert an ArrayBuffer to a standard JavaScript array of numbers (Uint8Array).","[[\"arraybuffer\",\"Object\",\"The ArrayBuffer instance\",\"\",null]]","[[\"number_array\",\"String(JSON Array)\",\"The resulting array of numbers\",null,null]]","const buf = new ArrayBuffer(64);\nconst uintArr = new Uint8Array(buf);\nconst regularArr = Array.from(uintArr);","[[\"ft_binary_data\",\"Feat\"],[\"feat13\",\"Feat\"],[\"ht_binary_arraybuffer_to_uint8array\",\"HowTo\"]]","chunk_1"]
```